<!DOCTYPE html>
<html lang="en">
<head>
	<title><%= user.display_name %> @<%= user.name %> | User</title>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="/main.css">
	<link rel="stylesheet" href="/css/index.css">
	<link rel="stylesheet" href="/css/dashboard.css">

  <!-- MATHJAX -->
  <script src="/js/mathjax-options.js"></script>
	<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3.2/es5/tex-svg.js"></script>
</head>
<body>
	<%- include('partials/header.ejs') %>
  <% const absoluteDate = new Intl.DateTimeFormat('en-us', { month: 'long', day: 'numeric', year: 'numeric', weekday: 'long', hourCycle: 'h23', hour: 'numeric', minute: 'numeric', second: 'numeric' }); %>
  <% const isUserOwner = isLoggedIn && user.name === username; %>
	<main>
		<div class="information">
      <% if(isUserOwner) { %>
        <div class="prompt--input">
          <label class="prompt--input--label" for="displayName">Display Name</label>
          <input id="displayName" type="text" placeholder="Display Name" autocomplete="false" value="<%- user.display_name %>" />
        </div>
        <div class="prompt--input">
          <label class="prompt--input--label" for="password">Change Password</label>
          <input id="password" type="password" placeholder="Password" autocomplete="false" value="" />
        </div>
      <% } else { %>
        <input id="displayName" type="text" autocomplete="false" value="<%- user.display_name %>" disabled />
      <% } %>
			<div id="userName">@<%= user.name %> <% if(user.is_verified) { %><i class="fa-solid fa-check" title="Verified"></i><% } %></div>
			<div id="noteCount"><%= notes.length %> note(s)</div>
		</div>
		<div id="tabs" data-opening="<%- page %>">
			<div id="tab">
				<a id="tab--notes">Notes</a>
				<a id="tab--about">About</a>
			</div>
			<div id="tab-content">
        <div id="tab-content--notes">
          <% for(let i = 0; i < notes.length; i++) { %>
            <% const note = notes[i]; %>
            <div class="note ripple"<% if(note.thumbnail_url) { %> style="--thumbnail: url(<%- note.thumbnail_url %>);"<% } %>>
              <a href="/note/<%- note.id %>"></a>
              <div class="note--title"><%= note.title %></div>
              <div class="note--information">
                <span class="note--information--views"><% if (note.unlisted) { %><i class="fa-regular fa-eye-slash"></i><% } else { %><i class="fa-regular fa-eye"></i><% } %> <%= note.views.toLocaleString() %> views</span>
                <% if(note.created_at.getTime() === note.updated_at.getTime()) { %>
                  <span class="note--information--created"><i class="fa-solid fa-arrow-up-from-bracket"></i> <%= $relativeTime(note.created_at) %></span>
                <% } else { %>
                  <span class="note--information--created"><i class="fa-regular fa-pen-to-square"></i> <%= $relativeTime(note.updated_at) %></span>
                <% } %>
              </div>
              <div class="note--keywords">
                <% for(let j = 0; j < note.keywords.length; j++) { %>
                  <a href="/?search=<%- note.keywords[j] %>"><%= note.keywords[j] %></a>
                <% } %>
              </div>
            </div>
          <% } %>
          <% if(isUserOwner) { %>
            <a href="/create" id="add-note-button"><i class="fa-solid fa-pen-nib"></i> Create</a>
          <% } %>
        </div>
        <div id="tab-content--about">
          <div id="bio" class="markdown-document">
            <% if(isUserOwner) { %>
              <div id="bio--edit"><i class="fa-solid fa-pen"></i> Edit About Page</div>
            <% } %>
            <%- about %>
          </div>
          <div id="information">
            <div id="registered"><%= absoluteDate.format(new Date(user.created_at)) %></div>
            <div id="noteCount"><%= notes.length %> note(s)</div>
          </div>
        </div>
      </div>
		</div>
	</main>
</body>
<script>
  $('#tab--notes').onclick = () => {
    window.history.replaceState(null, '', `/user/<%- user.name %>/notes`);
    $('#tabs').dataset.opening = 'notes';
  };

  $('#tab--about').onclick = () => {
    window.history.replaceState(null, '', `/user/<%- user.name %>/about`);
    $('#tabs').dataset.opening = 'about';
  };
</script>
<% if(isUserOwner) { %>
  <script type="module">
    import ui from '/js/modules/ui.mjs';
    import JSH from '/js/modules/jsh.mjs';
    import { addRipple } from '/js/modules/ripple.mjs';

    ui.promptAbout = async () => {
      const id = crypto.randomUUID();
      const promptWrapper = new JSH('div', null, { id: `prompt_${id}`, class: 'prompt-wrapper prompt-about-wrapper' }).appendTo(document.body);
      const prompt = new JSH('div', null, { class: 'prompt prompt-about' }).appendTo(promptWrapper);
      new JSH('div', 'Edit Your About Page', { class: 'prompt--title' }).appendTo(prompt);

      const inputWrapper = new JSH('div', null, { class: 'prompt--input', id: 'prompt-about-input-wrapper' }).appendTo(prompt);

      const aboutEditorPre = new JSH('pre', null, { class: 'language-md' }).appendTo(inputWrapper);
      const aboutEditorView = new JSH('code', null, { class: 'language-md', id: 'about-editor-view' }).appendTo(aboutEditorPre);

      const defaultEditorInput = <%- JSON.stringify(user.about) %>;

      const aboutEditorInput = new JSH('div', null, {
        id: 'about-editor-input',
        spellcheck: false,
        contenteditable: 'plaintext-only'
      }).appendTo(inputWrapper);

      aboutEditorInput.textContent = defaultEditorInput;

      updateEditor();
      aboutEditorInput.oninput = updateEditor;

      async function updateEditor() {
        aboutEditorView.innerHTML = aboutEditorInput.innerHTML;
        Prism.highlightElement(aboutEditorView);
      }


      const buttonWrapper = new JSH('div', null, { class: 'prompt--button' }).appendTo(prompt);
      const confirmButton = new JSH('div', '<i class="fa-solid fa-check"></i> OK', { class: 'prompt--confirm' }).appendTo(buttonWrapper);
      addRipple(confirmButton);

      const cancelButton = new JSH('div', '<i class="fa-solid fa-xmark"></i> Cancel', { class: 'prompt--cancel' }).appendTo(buttonWrapper);
      addRipple(cancelButton);


      let result = defaultEditorInput;

      await new Promise(resolve => {
        confirmButton.onclick = event => {
          result = aboutEditorInput.innerText;

          close();
          resolve();
        };

        cancelButton.onclick = event => {
          close();
          resolve();
        }
      });

      function close() {
        promptWrapper.classList.add('removed');
        promptWrapper.addEventListener('transitionend', () => {
          promptWrapper.remove();
        });
      }

      return result;
    };

    $('#bio--edit').onclick = async () => {
      $('script[src="/js/modules/prism.min.js"]') || new JSH('script', null, { 'data-manual': '', src: '/js/modules/prism.min.js' }).appendTo(document.head);

      const about = await ui.promptAbout();

      patchUser({ about });
    };

    $('#displayName').oninput = addSavePopup;
    $('#password').oninput = addSavePopup;

    function addSavePopup() {
      const saveEdit = $('#saveEdit') || new JSH('div', '<i class="fa-regular fa-floppy-disk"></i> Save changes', { id: 'saveEdit' }).appendTo($('body'));

      saveEdit.classList = 'opened';
      saveEdit.onclick = save;
    }

    async function save() {
      const saveEdit = $('#saveEdit');

      saveEdit.classList = 'wait';
      saveEdit.onclick = null;

      const data = {};

      if($('#displayName').value !== '') {
        data.displayName = $('#displayName').value;
      }

      if($('#password').value !== '') {
        data.password = $('#password').value;
      }

      await patchUser(data);

      saveEdit.classList = 'closed';
    }

    async function patchUser(data) {
      const response = await fetch(`/api/users`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if(!response.ok) {
        const json = await response.json();
        ui.alert({ title: 'Error', content: json.error });
      }
    }
  </script>
<% } %>
</html>