<!DOCTYPE html>
<html lang="en">
<head>
	<title>✎ <%= note.title %> | <%= mode.charAt(0).toUpperCase() + mode.slice(1) %></title>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="/main.css">
	<link rel="stylesheet" href="/css/create.css">

	<!-- PRISM -->
	<script src="/js/modules/prism.min.js" data-manual></script>
</head>
<body>
	<%- include('partials/header.ejs') %>
	<main>
	<div id="title" contenteditable="plaintext-only"><%= note.title %></div>
		<div id="tools">
			<div id="tools-left">

			</div>
			<div id="tools-right">
				<abbr title="Publish! (Ctrl+S)"><div id="publish"><i class="fa-solid fa-arrow-up-from-bracket"></i></div></abbr>
				<abbr title="Visibility: <%= !note.unlisted ? 'Public' : 'Unlisted' %>" id="visibility-abbr"><div id="visibility" data-visible="<%= !note.unlisted %>"><i class="fa-regular fa-eye"></i><i class="fa-regular fa-eye-slash"></i></div></abbr>
				<% if(mode === 'edit') { %>
					<abbr title="View note in new tab"><a href="/note/<%- note.id %>" id="view-note" target="_blank"><i class="fa-regular fa-file-lines"></i></a></abbr>
				<% } %>
			</div>
		</div>
		<div id="editor-wrapper">
			<pre class="language-md"><code class="language-md" id="editor-view"><%= note.content %></code></pre>
			<div id="editor-input" spellcheck="false" contenteditable="plaintext-only"><%= note.content %></div>
		</div>
	</main>
</body>
<script type="module">
	import ui from '/js/modules/ui.mjs';
	const mode = '<%- mode %>';
	const editor = $('#editor-input');
	const editorHighlight = $('#editor-view');
	const authorName = '<%- note.author_name %>';

	let isNoteSaved = true;

	let	defaultKeywords = '<%- note.keywords.join(" ") %>';
	let	defaultThumbnailURL = '<%- note.thumbnail_url %>';

	updateEditor();

	editor.onkeydown = event => {
		// Insert tab if user presses the tab key.
		if(event.keyCode === 9) {
			event.preventDefault();

			const target = event.target;
			const selection = target.ownerDocument.defaultView.getSelection();
			const range = selection.getRangeAt(0);

			const tabNode = document.createTextNode("\t");
			range.insertNode(tabNode);

			range.setStartAfter(tabNode);
			range.setEndAfter(tabNode);
			selection.removeAllRanges();
			selection.addRange(range);

			// updateEditor();
		}
	}

	editor.oninput = event => {
		// Mark as unsaved.
		save(false);

		updateEditor();
	}

	// Saved mark.
	function save(isSaved) {
		isNoteSaved = isSaved;

		if(isSaved && $('title').innerHTML.startsWith('*')) {
			// Remove the `*` prefix in the title.
			$('title').innerHTML = $('title').innerHTML.slice(1);
		} else if(!isSaved && !$('title').innerHTML.startsWith('*')) {
			// Prefix `*` to the title.
			$('title').innerHTML = '*' + $('title').innerHTML;
		}
	}

	/** Updates the syntax highlighting on the editor */
	function updateEditor() {
		editorHighlight.innerHTML = editor.innerHTML;
		Prism.highlightElement(editorHighlight);
	}

	// Disallow \n on title input.
	$('#title').oninput = () => {
		if($('#title').innerHTML.split('').includes('\n')) $('#title').innerHTML = $('#title').innerHTML.replaceAll('\n', '');

		save(false);
	};

	// Alert the user if the note isn’t saved yet.
	window.onbeforeunload = event => {
		if(!isNoteSaved) return 'Change you made may not be saved';
	}

	$('#visibility').onclick = () => {
		$('#visibility').dataset.visible = !JSON.parse($('#visibility').dataset.visible);
		
		if($('#visibility').dataset.visible === true) $('#visibility-abbr').title = 'Visibility: Public';
		else $('#visibility-abbr').title = 'Visibility: Unlisted';
	};
	
	$('#publish').onclick = publish;
	
	// Publish manager.
	document.addEventListener('keydown', event => {
		// Publish if the user uses [Ctrl]+[S].
		if(event.code === 'KeyS' && event.ctrlKey) {
			event.preventDefault();
			publish();
		}
	});

	async function publish() {
		const title = $('#title').innerText.replaceAll('\n', '');
		if(!title.trim()) {
			// If the title is empty.
			ui.alert({ title: 'Name your note!', content: 'The title can’t be empty.' });
			return;
		}

		const content = editor.innerText;
		if(!content.trim()) {
			// If the content is empty.
			ui.alert({ title: 'You’re trying to publish an empty note …', content: 'Is your mind this empty?' });
			return;
		}

		const unlisted = !JSON.parse($('#visibility').dataset.visible);

		let { thumbnailURL, keywords } = await ui.prompt({
			title: 'Publish!',
			inputs: [
				{
					type: 'text',
					default: defaultThumbnailURL,
					id: 'thumbnailURL',
					label: 'Thumbnail URL'
				},
				{
					type: 'text',
					default: defaultKeywords,
					id: 'keywords',
					label: 'Keywords'
				}
			]
		});

		// If the user cancels.
		if(keywords === null) return;

		// Only allows certain filetypes.
		if(thumbnailURL) {
			const allowedTypes = ['image/png', 'image/jpeg'];

			// Check thumbnail size and type.
			try {
				const thumbnail = await fetch(thumbnailURL);

				const thumbnailType = thumbnail.headers.get('Content-Type');
				if(!allowedTypes.includes(thumbnailType)) {
					ui.alert({ title: 'Disallowed filetype.', content: `Type of <span style="font-family:'Cascadia Mono'">${thumbnailType}</span> is disallowed, only <span style="font-family:'Cascadia Mono'">image/png</span> and <span style="font-family:'Cascadia Mono'">image/jpeg</span>` });
					return;
				}

				// Thumbnail file size in bytes, disallow thumbnail exceeding `maxSize` in bytes.
				const thumbnailSize = thumbnail.headers.get('Content-Length');
				const maxThumbnailSize = 100e3;

				if(thumbnailSize > maxThumbnailSize) {
					ui.alert({ title: 'Keep it low.', content: `Your thumbnail exceeds ${maxThumbnailSize/1e3} kB. This is a thumbnail, not a wallpaper!` });
					return;
				}
			} catch(error) {
				ui.alert({ title: 'Error', content: error });
				return;
			}
		}

		keywords = keywords.trim().toLowerCase();

		defaultKeywords = keywords;
		defaultThumbnailURL = thumbnailURL;

		if(keywords === '') keywords = [];
		else keywords = keywords.split(' ');

		let request;
		const headers = { 'Content-Type': 'application/json' };
		const body = JSON.stringify({
			title, content, keywords, thumbnailURL, unlisted
		});

		if(mode === 'create')
			request = new Request('/api/notes', { method: 'POST', headers, body });
		else if(mode === 'edit')
			request = new Request('/api/notes/<%- note.id %>', { method: 'PATCH', headers, body });

		const response = await fetch(request);
		const json = await response.json();

		if(!response.ok) {
			ui.alert({ title: 'Error', content: json.error });
			return;
		}

		// Mark as saved.
		save(true);

		// Alert the user.
		ui.alert({ title: 'Note published successfully!', content: `Note published with ID:<br><span style="font-family:'Cascadia Mono'">${json.data.id}</span>` });

		if(mode === 'create') location.replace(`/edit/${json.data.id}`);
	};
	// ----
</script>
</html>