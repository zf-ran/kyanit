<!DOCTYPE html>
<html lang="en">
<head>
	<title>✎ <%= JSON.parse(note).title || 'Untitled Note' %> | <%= mode.charAt(0).toUpperCase() + mode.slice(1) %></title>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link
		rel="stylesheet"
		href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
		integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w=="
		crossorigin="anonymous"
		referrerpolicy="no-referrer"
	/>
	<link rel="shortcut icon" type="image/png" href="/favicon.ico">
	<link rel="icon" type="image/x-icon" href="/favicon.ico">

	<link rel="stylesheet" href="/main.css">
	<link rel="stylesheet" href="/css/create.css">

	<script src="/main.js"></script>
	<script src="/js/modules/jsh.js"></script>

	<!-- PRISM -->
	<%# <link rel="stylesheet" type="text/css" href="/css/modules/prism.min.css" /> %>
	<script src="/js/modules/prism.min.js" data-manual></script>
</head>
<body>
	<%- include('partials/header.ejs') %>
	<main>
	<div id="title" contenteditable="plaintext-only">Untitled</div>
		<div id="tools">
			<div id="tools-left">

			</div>
			<div id="tools-right">
				<abbr title="Publish! (Ctrl+S)"><div id="publish"><i class="fa-solid fa-arrow-up-from-bracket"></i></div></abbr>
				<abbr title="Visibility: Public" id="visibility-abbr"><div id="visibility" data-visible="true"><i class="fa-regular fa-eye"></i> <i class="fa-regular  fa-eye-slash"></i></div></abbr>
			</div>
		</div>
		<div id="editor-wrapper">
			<pre class="language-md"><code class="language-md" id="editor-view"></code></pre>
			<div id="editor-input" spellcheck="false" contenteditable="plaintext-only"></div>
		</div>
	</main>
</body>
<script>
	const mode = '<%- mode %>';
	const editor = $('#editor-input');
	const editorView = $('#editor-view');
	let username = cookie?.username;
	let isNoteSaved = true;
	let lastFocusedElement;

	let defaultThumbnailURL = '';
	let defaultKeywords = '';

	editor.onkeydown = event => {
		if(event.keyCode === 9) {
			event.preventDefault();

			let target = event.target;
			let selection = target.ownerDocument.defaultView.getSelection();
			let range = selection.getRangeAt(0);

			let tabNode = document.createTextNode("\t");
			range.insertNode(tabNode);

			range.setStartAfter(tabNode);
			range.setEndAfter(tabNode);
			selection.removeAllRanges();
			selection.addRange(range);
		}

		updateEditor();
	}

	editor.oninput = event => {
		isNoteSaved = false;
		if(!$('title').innerHTML.startsWith('*')) $('title').innerHTML = '*' + $('title').innerHTML;

		updateEditor();
	}

	function updateEditor() {
		editorView.innerHTML = editor.innerHTML;
		Prism.highlightElement(editorView);
	}

	// EDIT MODE
	if(mode === 'edit') {
		const note = <%- note %>;

		if(note.authorName !== username) {
			(async () => {
				const confirmation = await ui.confirm({ title: 'You shall not pass!', content: 'You can’t edit a note that not yours!' });

				if(confirmation) location.assign(`/user/${note.authorName}`);
				else location.assign('/');
			})();
		}

		$('#title').innerText = note.title;
		$('#visibility-abbr').title = (note.unlisted) ? 'Visibility: Unlisted' : 'Visibility: Public';
		$('#visibility').dataset.visible = !note.unlisted;
		const viewAbbr = new JSH('abbr', null, { title: 'View note in new tab' }).appendTo($('#tools-right'));
		const viewButton = new JSH('a', '<i class="fa-regular fa-file-lines"></i>', { id: 'view-note', href: `/note/${note.id}`, target: '_blank' }).appendTo(viewAbbr);

		editor.textContent = note.content;
		updateEditor();

		defaultKeywords = renderString(note.keywords.join(' '));
		defaultThumbnailURL = note.thumbnailURL;
	} else if(mode === 'create') {
		editor.textContent = `# Welcome to eNotes editor\n\nThis is a paragraph`;
		updateEditor();
	}
	// ----

	// PUBLISH MANAGER
	$('#visibility').onclick = event => {
		$('#visibility').dataset.visible = !JSON.parse($('#visibility').dataset.visible);

		if($('#visibility').dataset.visible === true) $('#visibility-abbr').title = 'Visibility: Public';
		else $('#visibility-abbr').title = 'Visibility: Unlisted';
	};

	$('#publish').onclick = publish;
	document.addEventListener('keydown', event => {
		if(event.code === 'KeyS' && event.ctrlKey) {
			event.preventDefault();
			publish(event);
		}
	});

	async function publish() {
		const noteTitle = $('#title').innerText.replaceAll('\n', '');
		if(!noteTitle.trim()) {
			ui.alert({ title: 'Name your note!', content: 'The title can’t be empty.' });
			return;
		}

		const noteContents = editor.innerText;
		if(!noteContents.trim()) {
			ui.alert({ title: 'You’re trying to publish an empty note …', content: 'Is your mind this empty.' });
			return;
		}

		const noteUnlisted = !JSON.parse($('#visibility').dataset.visible);

		let {
			thumbnailURL: noteThumbnailURL,
			keywords: noteKeywords
		} = await ui.prompt({
			title: 'Publish!',
			inputs: [
				{
					type: 'text',
					default: defaultThumbnailURL,
					id: 'thumbnailURL',
					label: 'Thumbnail URL'
				},
				{
					type: 'text',
					default: defaultKeywords,
					id: 'keywords',
					label: 'Keywords'
				}
			]
		});

		// If the user cancels.
		if(noteKeywords === null) return;

		// Only allows certain filetypes.
		if(noteThumbnailURL) {
			const allowedTypes = ['image/png', 'image/jpeg'];

			try {
				const thumbnail = await fetch(noteThumbnailURL);

				const thumbnailType = thumbnail.headers.get('Content-Type');
				if(!allowedTypes.includes(thumbnailType)) {
					ui.alert({ title: 'Disallowed filetype.', content: `Type of <span style="font-family:'Cascadia Mono'">${thumbnailType}</span> is disallowed, only <span style="font-family:'Cascadia Mono'">image/png</span> and <span style="font-family:'Cascadia Mono'">image/jpeg</span>` });
					return;
				}

				// Thumbnail file size in bytes, disallow thumbnail exceeding 2 MB.
				const thumbnailSize = thumbnail.headers.get('Content-Length');
				const maxSize = 100e3;
				console.log(thumbnailSize);
				if(thumbnailSize > maxSize) {
					ui.alert({ title: 'Keep it low.', content: `Your thumbnail exceeds ${maxSize/1e3} kB. This is a thumbnail, not a wallpaper!` });
					return;
				}
			} catch(error) {
				ui.alert({ title: 'Error.', content: error });
				return;
			}
		}

		noteKeywords = noteKeywords.trim().toLowerCase();

		defaultKeywords = noteKeywords;
		defaultThumbnailURL = noteThumbnailURL;

		if(noteKeywords === '') noteKeywords = [];
		else noteKeywords = noteKeywords.split(' ');

		if(mode === 'create') {
			socket.emit('set--note', username, noteTitle, noteContents, noteUnlisted, noteThumbnailURL, noteKeywords, callback);
		} else if(mode === 'edit') {
			socket.emit('edit--note', username, noteTitle, noteContents, noteUnlisted, noteThumbnailURL, noteKeywords, location.pathname.split('/').at(-1), callback);
		}

		function callback(id) {
			isNoteSaved = true;

			if($('title').innerHTML.startsWith('*')) $('title').innerHTML = $('title').innerHTML.replace('*', '');
			ui.alert({ title: 'Note published successfully!', content: `Note published with ID:<br><span style="font-family:'Cascadia Mono'">${id}</span>` });
			if(mode === 'create') location.replace(`/create/${id}`);
		}
	};
	// ----

	$('#title').oninput = () => {
		if($('#title').innerHTML.split('').includes('\n')) $('#title').innerHTML = $('#title').innerHTML.replaceAll('\n', '')
	};

	window.onbeforeunload = event => {
		if(!isNoteSaved) return 'Change you made may not be saved';
	}
</script>
</html>